import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User } from './user.schema';
import * as bcrypt from 'bcrypt';
import * as crypto from 'crypto';
import { AddContactDto, CreateUserDto, LoginUserDto, ResetPasswordDto } from './dto/create-user.dto';

@Injectable()
export class UserService {
  constructor(@InjectModel(User.name) private userModel: Model<User>) {}

  async createUser(createUserDto: CreateUserDto) {
    const { password, ...createUserDetails } = createUserDto;
    const hashedPassword = await bcrypt.hash(password, 10);
    
    const user = new this.userModel({
      ...createUserDetails,
      password: hashedPassword,
    });
    return user.save();
  }                         

  async loginUser(loginUserDto: LoginUserDto) {
  const { email, password } = loginUserDto;
  const user = await this.userModel.findOne({ email }).exec();
  if (!user) {
    throw new UnauthorizedException('Invalid email or password');
  }
                                                                                                              
  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    throw new UnauthorizedException('Invalid email or password');
  }
  const { password: _, ...userDetails } = user.toObject();
  return userDetails;
  }

  async requestPasswordReset(email: string) {
    const user = await this.userModel.findOne({ email }).exec();
    if (!user) throw new BadRequestException('User not found');

    const resetToken = crypto.randomBytes(32).toString("hex");
    user.resetToken = resetToken;
    await user.save();
  
    return { message: 'Password reset token generated' };
  }

  async resetPassword(token: string, newPassword: string) {
    const user = await this.userModel.findOne({ resetToken: token }).exec();
    if (!user) throw new UnauthorizedException('Invalid or expired token');
    
    // Compare using .getTime() for Date vs number comparison
    // if (user.resetTokenExpiry.getTime() < Date.now()) throw new UnauthorizedException('Token expired');

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetToken = undefined;  
    user.resetTokenExpiry = undefined;  
    await user.save();
    return { message: 'Password successfully reset' };
  }

  async addContact(addContactDto: AddContactDto) {
    const existingContact = await this.userModel.findOne({ email: addContactDto.email }).exec();
    if (existingContact) {
      throw new BadRequestException('Contact with this email already exists');
    }
    const contact = new this.userModel({
      ...addContactDto,
    });
    return contact.save();
}
}














































































































































































































































































































































































































































633333332





















































































































































































































































































